#!/usr/bin/env bash
set -euo pipefail

# -----------------------------------------------------------------------------
# sdd-apply-theme.sh
# - Choose preset or custom
# - Generate theme.css with CSS variables + Tailwind utilities (no parsing)
# - Refresh theme-standards.md
# - Log in decisions.md
# -----------------------------------------------------------------------------

# Defaults
PRESET=""
PRIMARY=""
SECONDARY=""
SUCCESS=""
ERROR=""
APP_CSS=""
COMP_DIR=""
THEME_NAME=""

ROOT_DIR="$(pwd)"
AGENT_DIR="${ROOT_DIR}/.agent-sdd"
STANDARDS_DIR="${AGENT_DIR}/standards"
THEME_FILES_DIR="${STANDARDS_DIR}/theme-files"
PRODUCT_DIR="${AGENT_DIR}/product"

DATE_STR="$(date +%F)" # YYYY-MM-DD

# Color validation: short hex (#abc), long hex (#aabbcc), or rgb(r,g,b) with 0–255
is_color() {
  local v="$1"
  # Match short or long hex
  if [[ "$v" =~ ^\#[0-9A-Fa-f]{3}$ ]] || [[ "$v" =~ ^\#[0-9A-Fa-f]{6}$ ]]; then
    return 0
  fi
  # Match rgb(r,g,b) and enforce range
  if [[ "$v" =~ ^rgb\(([0-9]{1,3}),\s*([0-9]{1,3}),\s*([0-9]{1,3})\)$ ]]; then
    for comp in "${BASH_REMATCH[@]:1}"; do
      if (( comp < 0 || comp > 255 )); then
        return 1
      fi
    done
    return 0
  fi
  return 1
}

usage() {
  cat <<EOF
Usage: $0 [--preset minimal|classic|vibrant|custom]
          [--primary "#112233" | "#123" | "rgb(0,0,0)"]
          [--secondary "..."] [--success "..."] [--error "..."]
          [--app-css path/to/app.css] [--components path/to/components/ui]
          [--theme-name my-theme]

If no flags are provided, runs interactively.
EOF
}

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --preset) PRESET="${2:-}"; shift 2;;
    --primary) PRIMARY="${2:-}"; shift 2;;
    --secondary) SECONDARY="${2:-}"; shift 2;;
    --success) SUCCESS="${2:-}"; shift 2;;
    --error) ERROR="${2:-}"; shift 2;;
    --app-css) APP_CSS="${2:-}"; shift 2;;
    --components) COMP_DIR="${2:-}"; shift 2;;
    --theme-name) THEME_NAME="${2:-}"; shift 2;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown arg: $1"; usage; exit 1;;
  esac
done

# Early validation for CLI-provided colors
for color_var in PRIMARY SECONDARY SUCCESS ERROR; do
  val="${!color_var}"
  if [[ -n "$val" && ! $(is_color "$val") ]]; then
    echo "❌ Invalid $color_var value: $val"
    echo "   Must be #RGB, #RRGGBB, or rgb(r,g,b) with each component 0–255."
    exit 1
  fi
done

# Interactive flow if needed
if [[ -z "$PRESET" ]]; then
  echo "Select a theme preset:"
  select opt in "minimal" "classic" "vibrant" "custom"; do
    PRESET="$opt"; break
  done
fi

# Preset palettes
case "$PRESET" in
  minimal)
    THEME_NAME="${THEME_NAME:-minimal}"
    PRIMARY="${PRIMARY:-#4B5563}"
    SECONDARY="${SECONDARY:-#E5E7EB}"
    SUCCESS="${SUCCESS:-#10B981}"
    ERROR="${ERROR:-#EF4444}"
    ;;
  classic)
    THEME_NAME="${THEME_NAME:-classic}"
    PRIMARY="${PRIMARY:-#334155}"
    SECONDARY="${SECONDARY:-#CBD5E1}"
    SUCCESS="${SUCCESS:-#16A34A}"
    ERROR="${ERROR:-#DC2626}"
    ;;
  vibrant)
    THEME_NAME="${THEME_NAME:-vibrant}"
    PRIMARY="${PRIMARY:-#2563EB}"
    SECONDARY="${SECONDARY:-#F59E0B}"
    SUCCESS="${SUCCESS:-#22C55E}"
    ERROR="${ERROR:-#EF4444}"
    ;;
  custom)
    THEME_NAME="${THEME_NAME:-custom}"
    if [[ -z "$PRIMARY" ]]; then read -rp "Primary color (hex or rgb): " PRIMARY; fi
    if [[ -z "$SECONDARY" ]]; then read -rp "Secondary color (hex or rgb): " SECONDARY; fi
    if [[ -z "$SUCCESS" ]]; then read -rp "Success color (hex or rgb): " SUCCESS; fi
    if [[ -z "$ERROR" ]]; then read -rp "Error color (hex or rgb): " ERROR; fi
    ;;
  *)
    echo "Invalid preset: $PRESET"; exit 1;;
esac

# Final validation after preset or interactive assignment
for C in "$PRIMARY" "$SECONDARY" "$SUCCESS" "$ERROR"; do
  if ! is_color "$C"; then
    echo "Invalid color value: $C"
    echo "Use #RGB, #RRGGBB, or rgb(r,g,b) with 0–255."
    exit 1
  fi
done

# Discover paths if not provided
if [[ -z "$APP_CSS" ]]; then
  for guess in "src/app/globals.css" "src/app.css" "app/globals.css"; do
    if [[ -f "$guess" ]]; then APP_CSS="$guess"; break; fi
  done
fi

if [[ -z "$COMP_DIR" ]]; then
  for g in "src/components/ui" "components/ui"; do
    if [[ -d "$g" ]]; then COMP_DIR="$g"; break; fi
  done
fi

# Create theme directory
THEME_DIR="${THEME_FILES_DIR}/${THEME_NAME}"
mkdir -p "$THEME_DIR"

# Derive accessible text-on-primary (simple heuristic)
TEXT_ON_PRIMARY="#FFFFFF"

# Write theme.css
cat > "${THEME_DIR}/theme.css" <<EOF
/* Generated by sdd-apply-theme (${DATE_STR}) */
@layer base {
  :root {
    --color-primary: ${PRIMARY};
    --color-secondary: ${SECONDARY};
    --color-success: ${SUCCESS};
    --color-error: ${ERROR};

    --text-on-primary: ${TEXT_ON_PRIMARY};
    --text-default: #111827;
    --bg-default: #FFFFFF;
  }
  .dark {
    --text-default: #F9FAFB;
    --bg-default: #111827;
  }
}

@layer utilities {
  .bg-primary { background-color: var(--color-primary); }
  .bg-secondary { background-color: var(--color-secondary); }
  .bg-success { background-color: var(--color-success); }
  .bg-error { background-color: var(--color-error); }

  .text-on-primary { color: var(--text-on-primary); }
  .text-default { color: var(--text-default); }
  .bg-default { background-color: var(--bg-default); }
}
EOF

# Regenerate theme-standards.md
mkdir -p "$STANDARDS_DIR"
cat > "${STANDARDS_DIR}/theme-standards.md" <<EOF
# Theme Standards (${THEME_NAME})

> Generated on ${DATE_STR}. Update if you change colors.

## Palette

| Name      | Value       |
|-----------|-------------|
| Primary   | ${PRIMARY}  |
| Secondary | ${SECONDARY}|
| Success   | ${SUCCESS}  |
| Error     | ${ERROR}    |

**Allowed Tailwind Classes**

\`\`\`txt
bg-primary bg-secondary bg-success bg-error text-on-primary text-default bg-default
\`\`\`
EOF

# Log decision
cat >> "${PRODUCT_DIR}/decisions.md" <<EOF

[${DATE_STR}] – Applied ${THEME_NAME} theme
What: Set theme colors (primary ${PRIMARY}, secondary ${SECONDARY}, success ${SUCCESS}, error ${ERROR}).
Why: Align UI styling with selected theme.
Impact: Regenerated theme assets and standards for enforcement.
EOF

echo "✅ Theme '${THEME_NAME}' applied."
echo "   Theme files: ${THEME_DIR}/theme.css"
echo "   Standards updated: ${STANDARDS_DIR}/theme-standards.md"

if [[ -n "$APP_CSS" ]]; then
  rel_path=$(realpath --relative-to="$(dirname "$APP_CSS")" "${THEME_DIR}/theme.css")
  import_line="@import \"${rel_path}\";"
  if ! grep -Fq "$import_line" "$APP_CSS"; then
    printf '%s\n%s\n' "$import_line" "$(cat "$APP_CSS")" > "${APP_CSS}.tmp"
    mv "${APP_CSS}.tmp" "$APP_CSS"
    echo "   Added theme import to $APP_CSS"
  else
    echo "   Theme already imported in $APP_CSS"
  fi
else
  echo "⚠️ app.css not found. Add import manually: @import \"../../.agent-sdd/standards/theme-files/${THEME_NAME}/theme.css\";"
fi
